@page "/mapSwissTopo"
@using System.Text.Json
@using System.Diagnostics
@using EChargeFinder
@using EChargeFinder.Core
@using System;
@using System.Net.Http;
@using System.Threading.Tasks;

@inject IJSRuntime JSRuntime

<h1>SwissTopoMap</h1>

<div id="maplibre-map" style="width: 100%; height: 500px;"></div>

@code {
    private List<EVSEDataRecord> chargingStations = new List<EVSEDataRecord>();
    private List<BaseData> chargingStationsInfos = new List<BaseData>();
    private readonly HttpClient _httpClient = new HttpClient();
    private readonly JSONCleanUp _jsonCleanUp = new JSONCleanUp();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeMapAsync();
        }
    }

    private async Task InitializeMapAsync()
    {
        string metadataUrl = "https://data.geo.admin.ch/ch.bfe.ladestellen-elektromobilitaet/data/oicp/ch.bfe.ladestellen-elektromobilitaet.json";
        string statusUrl = "https://data.geo.admin.ch/ch.bfe.ladestellen-elektromobilitaet/status/oicp/ch.bfe.ladestellen-elektromobilitaet.json";

        try
        {
            // Fetch data in parallel
            var fetchMetadataTask = _httpClient.GetStringAsync(metadataUrl);
            var fetchStatusTask = _httpClient.GetStringAsync(statusUrl);

            // Await the completion of both tasks
            var metadataResponse = await fetchMetadataTask;
            var statusResponse = await fetchStatusTask;

            // Parse JSON data
            var metadataJson = JsonDocument.Parse(metadataResponse).RootElement;
            var statusJson = JsonDocument.Parse(statusResponse).RootElement;

            // Clean and deserialize JSON data
            var cleanedJsonData = _jsonCleanUp.cleanUpChargingStationAPINamingError(metadataJson.ToString());
            var rootData = JsonSerializer.Deserialize<LoadingStationInfos>(cleanedJsonData);
            var statusData = JsonSerializer.Deserialize<EVSEStatusesList>(statusJson.ToString());

            // Process and populate data
            if (rootData?.EVSEData != null)
            {
                chargingStations = rootData.EVSEData.SelectMany(e => e.EVSEDataRecord).ToList();
            }

            var availabilityStatuses = statusData?.EVSEStatuses
                .SelectMany(status => status.EVSEStatusRecord)
                .ToDictionary(record => record.EvseID, record => record.EVSEStatus);

            // Concurrently process charging station info
            var tasks = chargingStations.Select(async singleStation =>
            {
                var availabilityStatus = availabilityStatuses.GetValueOrDefault(singleStation.EvseID, "Unknown");

                var baseData = new BaseData
                    {
                        dataRecord = singleStation,
                        lat = singleStation.GeoCoordinates.Google.Split(' ')[0],
                        lng = singleStation.GeoCoordinates.Google.Split(' ')[1],
                        chargingStationId = singleStation.ChargingStationId,
                        renewableEnergy = singleStation.RenewableEnergy,
                        availability = availabilityStatus
                    };

                lock (chargingStationsInfos) // Ensure thread safety
                {
                    chargingStationsInfos.Add(baseData);
                }
            });

            await Task.WhenAll(tasks);
        }
        catch (HttpRequestException e)
        {
            Debug.WriteLine($"Request error: {e.Message}");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error: {ex.Message}");
        }

        await JSRuntime.InvokeVoidAsync("initializeMap", chargingStationsInfos);
    }
}

@* Inline JavaScript in Blazor *@
<script>
    function initializeMap(chargingStationsInfos) {
        var map = new maplibregl.Map({
            container: 'maplibre-map',
            style: 'https://vectortiles.geo.admin.ch/styles/ch.swisstopo.leichte-basiskarte_world.vt/style.json',
            center: [8.265, 46.786],
            zoom: 7,
        });
        map.addControl(new maplibregl.NavigationControl());

        const iconUrls = {
            Available: 'https://img.icons8.com/?size=100&id=X4QWt0vNygCb&format=png&color=10C027',
            Occupied: 'https://img.icons8.com/?size=100&id=X4QWt0vNygCb&format=png&color=FF0303',
            OutOfService: 'https://img.icons8.com/?size=100&id=X4QWt0vNygCb&format=png&color=FCC419',
            Unknown: 'https://img.icons8.com/?size=100&id=X4QWt0vNygCb&format=png&color=7B7B7B'
        };

        // Create markers in a batch if possible
        chargingStationsInfos.forEach(stationInfo => {
            var lngLat = [parseFloat(stationInfo.lng), parseFloat(stationInfo.lat)];
            var iconUrl = iconUrls[stationInfo.availability] || iconUrls.Unknown;
            var popupHtml = `<b>Charging Station ID:</b> ${stationInfo.chargingStationId}<br/>
                             <b>RenewableEnergy:</b> ${stationInfo.renewableEnergy}<br/>
                             <b>EvseID:</b> ${stationInfo.dataRecord.EvseID}<br/>
                             <b>Availability:</b> ${stationInfo.availability}<br/>
                             <b>Location:</b> (${stationInfo.lat}, ${stationInfo.lng})`;

            var customIcon = document.createElement('img');
            customIcon.src = iconUrl;
            customIcon.style.width = '30px';
            customIcon.style.height = '30px';

            var popup = new maplibregl.Popup({ offset: 25 }).setHTML(popupHtml);

            new maplibregl.Marker({ element: customIcon })
                .setLngLat(lngLat)
                .setPopup(popup)
                .addTo(map);
        });
    }
</script>

