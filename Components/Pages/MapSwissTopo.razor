@page "/mapSwissTopo"
@using System.Text.Json
@using System.Diagnostics

@inject IJSRuntime JSRuntime

<h1>SwissTopoMap</h1>

<div id="maplibre-map" style="width: 100%; height: 500px;"></div>

@code {

    private List<EVSEDataRecord> chargingStations = new List<EVSEDataRecord>();
    private List<GeoCoordinates> chargingStationsCoordinates = new List<GeoCoordinates>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Call the JavaScript function to initialize the map
            await InitializeMapAsync();
        }
    }

    private async Task InitializeMapAsync()
    {
        string jsonData = File.ReadAllText("C:\\Users\\Silvano\\Git\\EChargeFinder\\Resources\\JSON\\charging_stations.json");
        try
        {
            var rootData = JsonSerializer.Deserialize<Root>(jsonData);
            chargingStations = rootData.EVSEData.SelectMany(e => e.EVSEDataRecord).ToList();
            foreach (var singleStation in chargingStations)
            {
                chargingStationsCoordinates.Add(singleStation.GeoCoordinates);
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
        var coordinatesArray = chargingStationsCoordinates
            .Select(c => new
            {
                lat = c.Google.Split(' ')[0],
                lng = c.Google.Split(' ')[1]
            })
            .ToArray();

        await JSRuntime.InvokeVoidAsync("initializeMap", (object)coordinatesArray);
    }
}

@* Inline JavaScript in Blazor *@
<script>
    function initializeMap(coordinatesArray) {
        var map = new maplibregl.Map({
            container: 'maplibre-map',
            style: 'https://vectortiles.geo.admin.ch/styles/ch.swisstopo.leichte-basiskarte_world.vt/style.json',
            center: [8.265, 46.786], // starting position [lng, lat]
            zoom: 7, // starting zoom
        });
        map.addControl(new maplibregl.NavigationControl());

        function addMarker(lngLat, iconUrl, popupText) {
            var customIcon = document.createElement('img');
            customIcon.src = iconUrl;
            customIcon.style.width = '30px';  // Set the width of the icon
            customIcon.style.height = '30px'; // Set the height of the icon

            var popup = new maplibregl.Popup({ offset: 25 }).setText(popupText);

            new maplibregl.Marker({ element: customIcon })
                .setLngLat(lngLat)
                .setPopup(popup)
                .addTo(map);
        }

        var iconUrl = 'https://cdn4.iconfinder.com/data/icons/automotive-maintenance/100/automotive-electriccharger-512.png';

        // Adding markers based on the coordinates passed from C#
        coordinatesArray.forEach(function (coordinate) {
            var lngLat = [parseFloat(coordinate.lng), parseFloat(coordinate.lat)];
            addMarker(lngLat, iconUrl, `Charging Station at (${coordinate.lat}, ${coordinate.lng})`);
        });
    }
</script>


