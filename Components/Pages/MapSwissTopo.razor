@page "/mapSwissTopo"
@using System.Text.Json
@using System.Diagnostics
@using EChargeFinder
@using EChargeFinder.Core
@using System;
@using System.Net.Http;
@using System.Threading.Tasks;

@inject IJSRuntime JSRuntime

<h1>SwissTopoMap</h1>

<div id="maplibre-map" style="width: 100%; height: 500px;"></div>

@code {

    private List<EVSEDataRecord> chargingStations = new List<EVSEDataRecord>();
    private List<BaseData> chargingStationsInfos = new List<BaseData>();

    private JSONCleanUp jsonCleanUp = new JSONCleanUp();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Call the JavaScript function to initialize the map
            await InitializeMapAsync();
        }
    }

    private async Task InitializeMapAsync()
    {
        string jsonData = "";
        string jsonDataAvailability = "";

        // Create an HttpClient instance and fetch the data
        using (HttpClient client = new HttpClient())
        {
            try
            {
                //get stations meta data
                HttpResponseMessage response = await client.GetAsync("https://data.geo.admin.ch/ch.bfe.ladestellen-elektromobilitaet/data/oicp/ch.bfe.ladestellen-elektromobilitaet.json");
                response.EnsureSuccessStatusCode();
                string jsonResponse = await response.Content.ReadAsStringAsync();
                var jsonObject = JsonSerializer.Deserialize<JsonElement>(jsonResponse);
                jsonData = JsonSerializer.Serialize(jsonObject, new JsonSerializerOptions { WriteIndented = true });

                //get stations status
                HttpResponseMessage responseAvailability = await client.GetAsync("https://data.geo.admin.ch/ch.bfe.ladestellen-elektromobilitaet/status/oicp/ch.bfe.ladestellen-elektromobilitaet.json");
                responseAvailability.EnsureSuccessStatusCode();
                string jsonResponseAvailability = await responseAvailability.Content.ReadAsStringAsync();
                var jsonObjectAvailability = JsonSerializer.Deserialize<JsonElement>(jsonResponseAvailability);
                jsonDataAvailability = JsonSerializer.Serialize(jsonObjectAvailability, new JsonSerializerOptions { WriteIndented = true });
            }
            catch (HttpRequestException e)
            {
                Console.WriteLine("Request error: " + e.Message);
            }
        }

        // the stations meta data is not consistent, so fix had to be implemented 
        var jsonData1 = jsonCleanUp.cleanUpChargingStationAPINamingError(jsonData);

        try
        {
            //string jsonData1 = File.ReadAllText(path4);
            var rootData = JsonSerializer.Deserialize<LoadingStationInfos>(jsonData1);
            var statusData = JsonSerializer.Deserialize<EVSEStatusesList>(jsonDataAvailability);

            chargingStations = rootData.EVSEData.SelectMany(e => e.EVSEDataRecord).ToList();

            foreach (var singleStation in chargingStations)
            {
                var availabilityStatus = statusData.EVSEStatuses
                    .SelectMany(status => status.EVSEStatusRecord)
                    .FirstOrDefault(record => record.EvseID == singleStation.EvseID);

                if (availabilityStatus == null)
                {
                    availabilityStatus = new EVSEStatusRecord { EvseID = singleStation.EvseID, EVSEStatus = "Unknown" };
                }

                chargingStationsInfos.Add(new BaseData
                    {
                        dataRecord = singleStation,
                        lat = singleStation.GeoCoordinates.Google.Split(' ')[0],
                        lng = singleStation.GeoCoordinates.Google.Split(' ')[1],
                        chargingStationId = singleStation.ChargingStationId,
                        renewableEnergy = singleStation.RenewableEnergy,
                        availability = availabilityStatus.EVSEStatus
                    });
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }

        await JSRuntime.InvokeVoidAsync("initializeMap", (List<BaseData>)chargingStationsInfos);
    }
}

@* Inline JavaScript in Blazor *@
<script>
    function initializeMap(chargingStationsInfos) {
        var map = new maplibregl.Map({
            container: 'maplibre-map',
            style: 'https://vectortiles.geo.admin.ch/styles/ch.swisstopo.leichte-basiskarte_world.vt/style.json',
            center: [8.265, 46.786], // starting position [lng, lat]
            zoom: 7, // starting zoom
        });
        map.addControl(new maplibregl.NavigationControl());

        function addMarker(lngLat, iconUrl, popupHtml) {
            var customIcon = document.createElement('img');
            customIcon.src = iconUrl;
            customIcon.style.width = '30px';  // Set the width of the icon
            customIcon.style.height = '30px'; // Set the height of the icon

            var popup = new maplibregl.Popup({ offset: 25 })
                .setHTML(popupHtml);

            new maplibregl.Marker({ element: customIcon })
                .setLngLat(lngLat)
                .setPopup(popup)
                .addTo(map);
        }

        var iconUrlAvailable = 'https://img.icons8.com/?size=100&id=X4QWt0vNygCb&format=png&color=10C027';
        var iconUrlOccupied = 'https://img.icons8.com/?size=100&id=X4QWt0vNygCb&format=png&color=FF0303';
        var iconUrlOutOfService = 'https://img.icons8.com/?size=100&id=X4QWt0vNygCb&format=png&color=FCC419';
        var iconUrlUnknown = 'https://img.icons8.com/?size=100&id=X4QWt0vNygCb&format=png&color=7B7B7B';

        // Most likely base type data types are have to be used otherwise it is undefined
        chargingStationsInfos.forEach(function (stationInfo) {
            var lngLat = [parseFloat(stationInfo.lng), parseFloat(stationInfo.lat)];
            var popupHtml = `<b>Charging Station ID:</b> ${stationInfo.chargingStationId}<br/>
                                 <b>RenewableEnergy:</b> ${stationInfo.renewableEnergy}<br/>
                                 <b>EvseID:</b> ${stationInfo.dataRecord.EvseID}<br/>
                                 <b>Availability:</b> ${stationInfo.availability}<br/>
                                 <b>Location:</b> (${stationInfo.lat}, ${stationInfo.lng})`;
            var iconUrl;
            switch (stationInfo.availability) {
                case 'Available':
                    iconUrl = iconUrlAvailable;
                    break;
                case 'Occupied':
                    iconUrl = iconUrlOccupied;
                    break;
                case 'OutOfService':
                    iconUrl = iconUrlOutOfService;
                    break;
                case 'Unknown':
                default:
                    iconUrl = iconUrlUnknown;
                    break;
            }

            addMarker(lngLat, iconUrl, popupHtml);
        });
    }
</script>

